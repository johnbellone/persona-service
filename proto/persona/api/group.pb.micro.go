// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: persona/api/group.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_type "github.com/johnbellone/persona-service/proto/persona/type"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GroupService service

func NewGroupServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "GroupService.Create",
			Path:    []string{"/api/v1/groups"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "GroupService.Get",
			Path:    []string{"/api/v1/groups/{param}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "GroupService.Update",
			Path:    []string{"/api/v1/groups/{param}"},
			Method:  []string{"PUT"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "GroupService.Delete",
			Path:    []string{"/api/v1/groups/{param}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for GroupService service

type GroupService interface {
	Create(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*status.Status, error)
	Get(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*_type.Group, error)
	Update(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*status.Status, error)
	Delete(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*status.Status, error)
}

type groupService struct {
	c    client.Client
	name string
}

func NewGroupService(name string, c client.Client) GroupService {
	return &groupService{
		c:    c,
		name: name,
	}
}

func (c *groupService) Create(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*status.Status, error) {
	req := c.c.NewRequest(c.name, "GroupService.Create", in)
	out := new(status.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) Get(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*_type.Group, error) {
	req := c.c.NewRequest(c.name, "GroupService.Get", in)
	out := new(_type.Group)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) Update(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*status.Status, error) {
	req := c.c.NewRequest(c.name, "GroupService.Update", in)
	out := new(status.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) Delete(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*status.Status, error) {
	req := c.c.NewRequest(c.name, "GroupService.Delete", in)
	out := new(status.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupService service

type GroupServiceHandler interface {
	Create(context.Context, *GroupRequest, *status.Status) error
	Get(context.Context, *GroupRequest, *_type.Group) error
	Update(context.Context, *GroupRequest, *status.Status) error
	Delete(context.Context, *GroupRequest, *status.Status) error
}

func RegisterGroupServiceHandler(s server.Server, hdlr GroupServiceHandler, opts ...server.HandlerOption) error {
	type groupService interface {
		Create(ctx context.Context, in *GroupRequest, out *status.Status) error
		Get(ctx context.Context, in *GroupRequest, out *_type.Group) error
		Update(ctx context.Context, in *GroupRequest, out *status.Status) error
		Delete(ctx context.Context, in *GroupRequest, out *status.Status) error
	}
	type GroupService struct {
		groupService
	}
	h := &groupServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Create",
		Path:    []string{"/api/v1/groups"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Get",
		Path:    []string{"/api/v1/groups/{param}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Update",
		Path:    []string{"/api/v1/groups/{param}"},
		Method:  []string{"PUT"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Delete",
		Path:    []string{"/api/v1/groups/{param}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&GroupService{h}, opts...))
}

type groupServiceHandler struct {
	GroupServiceHandler
}

func (h *groupServiceHandler) Create(ctx context.Context, in *GroupRequest, out *status.Status) error {
	return h.GroupServiceHandler.Create(ctx, in, out)
}

func (h *groupServiceHandler) Get(ctx context.Context, in *GroupRequest, out *_type.Group) error {
	return h.GroupServiceHandler.Get(ctx, in, out)
}

func (h *groupServiceHandler) Update(ctx context.Context, in *GroupRequest, out *status.Status) error {
	return h.GroupServiceHandler.Update(ctx, in, out)
}

func (h *groupServiceHandler) Delete(ctx context.Context, in *GroupRequest, out *status.Status) error {
	return h.GroupServiceHandler.Delete(ctx, in, out)
}
