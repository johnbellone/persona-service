// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: persona/api/role.proto

package persona_api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_type "github.com/johnbellone/persona-service/proto/persona/type"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoleService service

func NewRoleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "RoleService.Create",
			Path:    []string{"/api/v1/roles"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "RoleService.Get",
			Path:    []string{"/api/v1/roles/{param}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "RoleService.Update",
			Path:    []string{"/api/v1/roles/{param}"},
			Method:  []string{"PUT"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "RoleService.Delete",
			Path:    []string{"/api/v1/roles/{param}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for RoleService service

type RoleService interface {
	Create(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*status.Status, error)
	Get(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*_type.Role, error)
	Update(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*status.Status, error)
	Delete(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*status.Status, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) Create(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*status.Status, error) {
	req := c.c.NewRequest(c.name, "RoleService.Create", in)
	out := new(status.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Get(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*_type.Role, error) {
	req := c.c.NewRequest(c.name, "RoleService.Get", in)
	out := new(_type.Role)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Update(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*status.Status, error) {
	req := c.c.NewRequest(c.name, "RoleService.Update", in)
	out := new(status.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Delete(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*status.Status, error) {
	req := c.c.NewRequest(c.name, "RoleService.Delete", in)
	out := new(status.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	Create(context.Context, *RoleRequest, *status.Status) error
	Get(context.Context, *RoleRequest, *_type.Role) error
	Update(context.Context, *RoleRequest, *status.Status) error
	Delete(context.Context, *RoleRequest, *status.Status) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) error {
	type roleService interface {
		Create(ctx context.Context, in *RoleRequest, out *status.Status) error
		Get(ctx context.Context, in *RoleRequest, out *_type.Role) error
		Update(ctx context.Context, in *RoleRequest, out *status.Status) error
		Delete(ctx context.Context, in *RoleRequest, out *status.Status) error
	}
	type RoleService struct {
		roleService
	}
	h := &roleServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.Create",
		Path:    []string{"/api/v1/roles"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.Get",
		Path:    []string{"/api/v1/roles/{param}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.Update",
		Path:    []string{"/api/v1/roles/{param}"},
		Method:  []string{"PUT"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.Delete",
		Path:    []string{"/api/v1/roles/{param}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&RoleService{h}, opts...))
}

type roleServiceHandler struct {
	RoleServiceHandler
}

func (h *roleServiceHandler) Create(ctx context.Context, in *RoleRequest, out *status.Status) error {
	return h.RoleServiceHandler.Create(ctx, in, out)
}

func (h *roleServiceHandler) Get(ctx context.Context, in *RoleRequest, out *_type.Role) error {
	return h.RoleServiceHandler.Get(ctx, in, out)
}

func (h *roleServiceHandler) Update(ctx context.Context, in *RoleRequest, out *status.Status) error {
	return h.RoleServiceHandler.Update(ctx, in, out)
}

func (h *roleServiceHandler) Delete(ctx context.Context, in *RoleRequest, out *status.Status) error {
	return h.RoleServiceHandler.Delete(ctx, in, out)
}
